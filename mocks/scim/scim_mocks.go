// Code generated by MockGen. DO NOT EDIT.
// Source: scim.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=../../mocks/scim/scim_mocks.go -source=scim.go AWSSCIMProvider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	aws "github.com/slashdevops/idp-scim-sync/pkg/aws"
	gomock "go.uber.org/mock/gomock"
)

// MockAWSSCIMProvider is a mock of AWSSCIMProvider interface.
type MockAWSSCIMProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAWSSCIMProviderMockRecorder
	isgomock struct{}
}

// MockAWSSCIMProviderMockRecorder is the mock recorder for MockAWSSCIMProvider.
type MockAWSSCIMProviderMockRecorder struct {
	mock *MockAWSSCIMProvider
}

// NewMockAWSSCIMProvider creates a new mock instance.
func NewMockAWSSCIMProvider(ctrl *gomock.Controller) *MockAWSSCIMProvider {
	mock := &MockAWSSCIMProvider{ctrl: ctrl}
	mock.recorder = &MockAWSSCIMProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAWSSCIMProvider) EXPECT() *MockAWSSCIMProviderMockRecorder {
	return m.recorder
}

// CreateOrGetGroup mocks base method.
func (m *MockAWSSCIMProvider) CreateOrGetGroup(ctx context.Context, g *aws.CreateGroupRequest) (*aws.CreateGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrGetGroup", ctx, g)
	ret0, _ := ret[0].(*aws.CreateGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrGetGroup indicates an expected call of CreateOrGetGroup.
func (mr *MockAWSSCIMProviderMockRecorder) CreateOrGetGroup(ctx, g any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrGetGroup", reflect.TypeOf((*MockAWSSCIMProvider)(nil).CreateOrGetGroup), ctx, g)
}

// CreateOrGetUser mocks base method.
func (m *MockAWSSCIMProvider) CreateOrGetUser(ctx context.Context, u *aws.CreateUserRequest) (*aws.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrGetUser", ctx, u)
	ret0, _ := ret[0].(*aws.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrGetUser indicates an expected call of CreateOrGetUser.
func (mr *MockAWSSCIMProviderMockRecorder) CreateOrGetUser(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrGetUser", reflect.TypeOf((*MockAWSSCIMProvider)(nil).CreateOrGetUser), ctx, u)
}

// DeleteGroup mocks base method.
func (m *MockAWSSCIMProvider) DeleteGroup(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockAWSSCIMProviderMockRecorder) DeleteGroup(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockAWSSCIMProvider)(nil).DeleteGroup), ctx, id)
}

// DeleteUser mocks base method.
func (m *MockAWSSCIMProvider) DeleteUser(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockAWSSCIMProviderMockRecorder) DeleteUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAWSSCIMProvider)(nil).DeleteUser), ctx, id)
}

// GetUser mocks base method.
func (m *MockAWSSCIMProvider) GetUser(ctx context.Context, userID string) (*aws.GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userID)
	ret0, _ := ret[0].(*aws.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAWSSCIMProviderMockRecorder) GetUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAWSSCIMProvider)(nil).GetUser), ctx, userID)
}

// GetUserByUserName mocks base method.
func (m *MockAWSSCIMProvider) GetUserByUserName(ctx context.Context, userName string) (*aws.GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserName", ctx, userName)
	ret0, _ := ret[0].(*aws.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUserName indicates an expected call of GetUserByUserName.
func (mr *MockAWSSCIMProviderMockRecorder) GetUserByUserName(ctx, userName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserName", reflect.TypeOf((*MockAWSSCIMProvider)(nil).GetUserByUserName), ctx, userName)
}

// ListGroups mocks base method.
func (m *MockAWSSCIMProvider) ListGroups(ctx context.Context, filter string) (*aws.ListGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroups", ctx, filter)
	ret0, _ := ret[0].(*aws.ListGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroups indicates an expected call of ListGroups.
func (mr *MockAWSSCIMProviderMockRecorder) ListGroups(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroups", reflect.TypeOf((*MockAWSSCIMProvider)(nil).ListGroups), ctx, filter)
}

// ListUsers mocks base method.
func (m *MockAWSSCIMProvider) ListUsers(ctx context.Context, filter string) (*aws.ListUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, filter)
	ret0, _ := ret[0].(*aws.ListUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockAWSSCIMProviderMockRecorder) ListUsers(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockAWSSCIMProvider)(nil).ListUsers), ctx, filter)
}

// PatchGroup mocks base method.
func (m *MockAWSSCIMProvider) PatchGroup(ctx context.Context, pgr *aws.PatchGroupRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchGroup", ctx, pgr)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGroup indicates an expected call of PatchGroup.
func (mr *MockAWSSCIMProviderMockRecorder) PatchGroup(ctx, pgr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGroup", reflect.TypeOf((*MockAWSSCIMProvider)(nil).PatchGroup), ctx, pgr)
}

// PutUser mocks base method.
func (m *MockAWSSCIMProvider) PutUser(ctx context.Context, usr *aws.PutUserRequest) (*aws.PutUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutUser", ctx, usr)
	ret0, _ := ret[0].(*aws.PutUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutUser indicates an expected call of PutUser.
func (mr *MockAWSSCIMProviderMockRecorder) PutUser(ctx, usr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutUser", reflect.TypeOf((*MockAWSSCIMProvider)(nil).PutUser), ctx, usr)
}
